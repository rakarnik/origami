#!/bin/bash

## helper variables
BASEDIR=$(dirname $0)
BINDIR=$BASEDIR/../bin
SCRIPTDIR=$BASEDIR/../scripts

### command line options
OUTPUTDIR=output
VERBOSE=off
SKIP=on
PARALLEL=off
RUNMODE=long
SPLITNUM=4000000
BZPOSTFIX="[.]bz2$"
BOWTIEIDX=notafile
KEEPTMP=no
FORWARDLINKER="ACGCGATATCTTATCTGACT"
REVERSELINKER="AGTCAGATAAGATATCGCGT"
ABLINKERA="CTGCTGTCCG"
ABLINKERB="CTGCTGTCAT"
HICHIPLIGATIONJUNCTION=none
PREPROCESSINGCMD=cat
MINREADLENGTH=20
MACSGSIZE=hs
CALLBROADPEAK=no
SKIPTRIMMING=no
BOWTIEOPT=""

## other variables
ORIGINALCMD="$0 $@"



### utility functions

verbose() {
	if [ "$VERBOSE" = on ]
	then
		NOWTIME=$(date)
		echo "[$NOWTIME] $1"
	fi
}

verbosecmd() {
  if [ "$VERBOSE" = on ]
  then
    NOWTIME=$(date)
    echo "[$NOWTIME] $@"
  fi
  eval "$@"
}

dispatch() {
        if [ "$PARALLEL" = on ]
        then
                bsub -K -q $LSFQUEUE -J origami -o $OUTPUTDIR/logs/cluster_log.txt "$@" &
        else
                eval "$@"
        fi
}

helpmenu() {
  if [ $# -eq 1 ];
  then
    echo $1
  fi
  
  printf "origami-alignment [options] <bowtie1 index> <first read FASTQ> <second read FASTQ>\n"
  printf "\tFor the FASTQ files, they may be either in plain text (no compression), gzip (.gz),\n"
  printf "\tor bzip2 (.bz2) format (automatically deteced by file suffix)\n\n"
  printf "%15s\t%-50s\n" "-o,--output=" "directory to output the alignment results (default is output/)"
  printf "%15s\t%-50s\n" "-h" "help menu (this menu)"
  printf "%15s\t%-50s\n" "-v" "turn on verbose mode"
  printf "%15s\t%-50s\n" "-m,--min-len=" "minimum read-length to keep post trimming (default is 15 bp)"
  printf "%15s\t%-50s\n" "-p" "run parallel LSF mode (currently requires bsub)"
  printf "%15s\t%-50s\n" "--lsf-queue=[queue]" "set the LSF queue to use in parallel mode (implies -p)"
  printf "%15s\t%-50s\n" "--keep-tmp" "don't delete the temporary files"
  printf "%15s\t%-50s\n" "--splitnum=[NUM]" "split input reads into NUM smaller files during paralleization (default 10000000)"
  printf "%15s\t%-50s\n" "--mode=[mode]" "run origami in long-read (long), AB-linker (ab), or HiChIP (hichip) mode (see documentation, default long)"
  printf "%15s\t%-50s\n" "--forward-linker=[DNA]"  "set the long-read foward-linker sequence (default ACGCGATATCTTATCTGACT)"
  printf "%15s\t%-50s\n" "--reverse-linker=[DNA]"  "set the long-read reverse-linker sequence (default AGTCAGATAAGATATCGCGT)"
  printf "%15s\t%-50s\n" "--a-linker=[DNA]" "set the AB-linker A-linker sequence (default CTGCTGTCCG)"
  printf "%15s\t%-50s\n" "--b-linker=[DNA]" "set the AB-linker B-linker sequence (default, CTGCTGTCAT)"
  printf "%15s\t%-50s\n" "--junction=[DNA]" "set the junction to look for in HiChIP"
  printf "%15s\t%-50s\n" "--pp=[executable]" "run executable on each read file before trimming (must be executable, default none)"
  printf "%15s\t%-50s\n" "--macs-gsize=[string]" "set genome size for macs2 peak calling (default is 'hs')"
  printf "%15s\t%-50s\n" "--callbroadpeak" "calls broad peaks via macs2 and generates merged peak file"
  
}

### functions related to read processing

linkertrimming() {
  
  USEABLINKER="$1"
  case $USEABLINKER in
    yes)
      echo "Running in AB-linker trimming mode"
      ;;
    no)
      echo "Running in long-linker trimming mode"
      ;;
    *)
      ## this shouldn't get here, but in case it does default to long-linker mode
      echo "Running in long-linker trimming mode"
      ;;
  esac
  
  if [ $PARALLEL = "on" ]
  then
    dispatch "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/leftreads"
    dispatch "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/rightreads"
  
    wait 

    ## One assumption here is that split names the files in the same linear order -- maybe this should be done differently?
    LEFTREADS=($(ls $OUTPUTDIR/tmp/leftreads*))
    RIGHTREADS=($(ls $OUTPUTDIR/tmp/rightreads*))
    

    if [ $USEABLINKER = "yes" ]
    then
      AAPARAM="-a $ABLINKERA -A $ABLINKERA"
      BBPARAM="-a $ABLINKERB -A $ABLINKERB"
      ABPARAM="-a $ABLINKERA -A $ABLINKERB"
      BAPARAM="-a $ABLINKERB -A $ABLINKERA"
      NPARAM="-a $ABLINKERA -a $ABLINKERB -A $ABLINKERA -A $ABLINKERB"
      
      
      for((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $AAPARAM -o $OUTPUTDIR/tmp/l_same_aa_$i.fq -p $OUTPUTDIR/tmp/r_same_aa_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
      
        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BBPARAM -o $OUTPUTDIR/tmp/l_same_bb_$i.fq -p $OUTPUTDIR/tmp/r_same_bb_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $ABPARAM -o $OUTPUTDIR/tmp/l_diff_ab_$i.fq -p $OUTPUTDIR/tmp/r_diff_ab_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BAPARAM -o $OUTPUTDIR/tmp/l_diff_ba_$i.fq -p $OUTPUTDIR/tmp/r_diff_ba_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
        
        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-trimmed -m $MINREADLENGTH $NPARAM -o $OUTPUTDIR/tmp/l_neither_$i.fq -p $OUTPUTDIR/tmp/r_neither_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

      done
      
      wait

      dispatch "cat $OUTPUTDIR/tmp/l_same_aa_*.fq $OUTPUTDIR/tmp/l_same_bb_*.fq > $OUTPUTDIR/tmp/left_kept.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_same_aa_*.fq $OUTPUTDIR/tmp/r_same_bb_*.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_diff_ab_*.fq $OUTPUTDIR/tmp/l_diff_ba_*.fq > $OUTPUTDIR/tmp/left_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_diff_ab_*.fq $OUTPUTDIR/tmp/r_diff_ba_*.fq > $OUTPUTDIR/tmp/right_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/l_neither_*.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_neither_*.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"

      wait
    else

      for ((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch @CUTADAPTOR@ -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/l_t1_$i.fq --untrimmed-output $OUTPUTDIR/tmp/l_nt1_$i.fq -p $OUTPUTDIR/tmp/r_t1_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/r_nt1_$i.fq ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
      done
      wait
  
      for ((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch @CUTADAPTOR@ -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t2_$i.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt2_$i.fq -p $OUTPUTDIR/tmp/l_t2_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt2_$i.fq $OUTPUTDIR/tmp/r_nt1_$i.fq $OUTPUTDIR/tmp/l_nt1_$i.fq
      
        dispatch @CUTADAPTOR@ -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t3_$i.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt3_$i.fq -p $OUTPUTDIR/tmp/l_t3_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt3_$i.fq $OUTPUTDIR/tmp/r_t1_$i.fq $OUTPUTDIR/tmp/l_t1_$i.fq
      done

      wait
  
      dispatch "cat $OUTPUTDIR/tmp/l_t3*.fq $OUTPUTDIR/tmp/l_nt3*.fq $OUTPUTDIR/tmp/l_t2*.fq > $OUTPUTDIR/tmp/left_kept.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_t3*.fq $OUTPUTDIR/tmp/r_nt3*.fq $OUTPUTDIR/tmp/r_t2*.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_nt2*.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_nt2*.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"

      wait
    fi
    
    $SCRIPTDIR/make-trimmed-reads-stat-report.pl dir $OUTPUTDIR/tmp $USEABLINKER $OUTPUTDIR/logs/trimming-report.txt
    
    rm $OUTPUTDIR/tmp/leftreads* $OUTPUTDIR/tmp/rightreads*

  else

    verbosecmd "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/left_reads.fq"
    
    verbosecmd "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/right_reads.fq"

    wait
    
    if [ $USEABLINKER = "yes" ]
    then

      AAPARAM="-a $ABLINKERA -A $ABLINKERA"
      BBPARAM="-a $ABLINKERB -A $ABLINKERB"
      ABPARAM="-a $ABLINKERA -A $ABLINKERB"
      BAPARAM="-a $ABLINKERB -A $ABLINKERA"
      
    
      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $AAPARAM -o $OUTPUTDIR/tmp/l_same_aa.fq -p $OUTPUTDIR/tmp/r_same_aa.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
      
      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BBPARAM -o $OUTPUTDIR/tmp/l_same_bb.fq -p $OUTPUTDIR/tmp/r_same_bb.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq


      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $ABPARAM -o $OUTPUTDIR/tmp/l_diff_ab.fq -p $OUTPUTDIR/tmp/r_diff_ab.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BAPARAM -o $OUTPUTDIR/tmp/l_diff_ba.fq -p $OUTPUTDIR/tmp/r_diff_ba.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

      dispatch "cat $OUTPUTDIR/tmp/l_same_aa.fq $OUTPUTDIR/tmp/l_same_bb.fq > $OUTPUTDIR/tmp/left_kept.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_same_aa.fq $OUTPUTDIR/tmp/r_same_bb.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_diff_ab.fq $OUTPUTDIR/tmp/l_diff_ba.fq > $OUTPUTDIR/tmp/left_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_diff_ab.fq $OUTPUTDIR/tmp/r_diff_ba.fq > $OUTPUTDIR/tmp/right_chimeric.fq"

    else

      dispatch @CUTADAPTOR@ -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/l_t1.fq --untrimmed-output $OUTPUTDIR/tmp/l_nt1.fq -p $OUTPUTDIR/tmp/r_t1.fq --untrimmed-paired-output $OUTPUTDIR/tmp/r_nt1.fq $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
    
      wait
    
      dispatch @CUTADAPTOR@ -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t2.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt2.fq -p $OUTPUTDIR/tmp/l_t2.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt2.fq $OUTPUTDIR/tmp/r_nt1.fq $OUTPUTDIR/tmp/l_nt1.fq
    
      dispatch @CUTADAPTOR@ -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t3.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt3.fq -p $OUTPUTDIR/tmp/l_t3.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt3.fq $OUTPUTDIR/tmp/r_t1.fq $OUTPUTDIR/tmp/l_t1.fq

      wait

      dispatch "cat $OUTPUTDIR/tmp/l_t3.fq $OUTPUTDIR/tmp/l_nt3.fq $OUTPUTDIR/tmp/l_t2.fq > $OUTPUTDIR/tmp/left_kept.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_t3.fq $OUTPUTDIR/tmp/r_nt3.fq $OUTPUTDIR/tmp/r_t2.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_nt2.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_nt2.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"  

      wait
    fi

  fi
    
  rm $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

  ### Cleanup
  rm $OUTPUTDIR/tmp/l_*.fq $OUTPUTDIR/tmp/r_*.fq

  if [ $USEABLINKER = 'yes' ]
  then
    dispatch "bzip2 $OUTPUTDIR/tmp/left_chimeric.fq"    
    dispatch "bzip2 $OUTPUTDIR/tmp/right_chimeric.fq"
  fi
  
  dispatch bzip2 $OUTPUTDIR/tmp/left_untrimmed.fq
  dispatch bzip2 $OUTPUTDIR/tmp/right_untrimmed.fq
  
  
  wait



  if [ "$SKIPTRIMMING" == "no" ];
  then

    if [ $USEABLINKER = 'yes' ]
    then
      mv $OUTPUTDIR/tmp/left_chimeric.fq.bz2 $OUTPUTDIR/.
      mv $OUTPUTDIR/tmp/right_chimeric.fq.bz2 $OUTPUTDIR/.
    fi

    ## Keep untrimmed reads
    mv $OUTPUTDIR/tmp/left_untrimmed.fq.bz2 $OUTPUTDIR/.
    mv $OUTPUTDIR/tmp/right_untrimmed.fq.bz2 $OUTPUTDIR/.



    rm -f $OUTPUTDIR/tmp/left_unzip.fq  $OUTPUTDIR/tmp/right_unzip.fq

  else
    dispatch "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/left_kept.fq"
    
    dispatch "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/right_kept.fq"
  
    wait
  fi

  echo "Aligning reads"
  if [[ "$SKIP" == off || ! -e "$OUTPUTDIR/mapped_reads.bam" ]]; #&& $BINDIR/bowtie_align.sh $OUTPUTDIR $BOWTIEIDX $PARALLEL $SPLITNUM
  then

    if [ $PARALLEL == "on" ];
    then
      dispatch "split -l $SPLITNUM $OUTPUTDIR/tmp/left_kept.fq $OUTPUTDIR/tmp/leftkept"
      dispatch "split -l $SPLITNUM $OUTPUTDIR/tmp/right_kept.fq $OUTPUTDIR/tmp/rightkept"

      wait

      for FILE in $OUTPUTDIR/tmp/leftkept*
      do
  	    dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $FILE > $FILE.sam; @SAMTOOLS@ view -Sb $FILE.sam > $FILE.bam; rm $FILE.sam"
      done

      for FILE in $OUTPUTDIR/tmp/rightkept*
      do
    	  dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $FILE > $FILE.sam; @SAMTOOLS@ view -Sb $FILE.sam > $FILE.bam; rm $FILE.sam"
      done

      wait

      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ merge left_kept.bam leftkept*.bam"
      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ merge right_kept.bam rightkept*.bam"

      wait

      dispatch "rm $OUTPUTDIR/tmp/leftkept* $OUTPUTDIR/tmp/rightkept*"
      wait
    else
      dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/left_kept.fq > $OUTPUTDIR/tmp/left_kept.sam; @SAMTOOLS@ view -Sb $OUTPUTDIR/tmp/left_kept.sam > $OUTPUTDIR/tmp/left_kept.bam; rm $OUTPUTDIR/tmp/left_kept.sam"
      dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/right_kept.fq > $OUTPUTDIR/tmp/right_kept.sam; @SAMTOOLS@ view -Sb $OUTPUTDIR/tmp/right_kept.sam > $OUTPUTDIR/tmp/right_kept.bam; rm $OUTPUTDIR/tmp/right_kept.sam"

      wait
    fi


    if [ $PARALLEL = "on" ];
    then
      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ sort -Obam -Tlefttmp -n left_kept.bam > left_kept.sorted.bam"
  
      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ sort -Obam -Trighttmp -n right_kept.bam > right_kept.sorted.bam"
    else
      cd $OUTPUTDIR/tmp
      dispatch "@SAMTOOLS@ sort -Obam -Tlefttmp -n left_kept.bam > left_kept.sorted.bam"
    
      dispatch "@SAMTOOLS@ sort -Obam -Trighttmp -n right_kept.bam > right_kept.sorted.bam"
      cd ../..
    fi
  fi


  wait

  dispatch "$BINDIR/mapped-reads-merge $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam $OUTPUTDIR/mapped_reads.bam $OUTPUTDIR/logs/alignment-statistics.txt"

  wait


  rm $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam

  #mv $OUTPUTDIR/tmp/left_kept.bam $OUTPUTDIR/left_kept.bam
  #mv $OUTPUTDIR/tmp/right_kept.bam $OUTPUTDIR/right_kept.bam
}



hichip() {
  echo "Running in HiChIP mode"
  
  if [ "$HICHIPLIGATIONJUNCTION" == "none" ];
  then
    helpmenu "Error: when using HiChIP mode, need to set the expected ligation junction sequence"
    exit 1
  fi
  
  verbosecmd "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/left_reads.fq"
  verbosecmd "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/right_reads.fq"
  
  @CUTADAPTOR@ -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/left_trimmed.fastq --untrimmed-output=$OUTPUTDIR/tmp/left_untrimmed.fastq -p $OUTPUTDIR/tmp/right_left_trimmed.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/right_left_untrimmed.fastq $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
  @CUTADAPTOR@ -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/right_trimmed.fastq --untrimmed-output=$OUTPURDIR/tmp/right_untrimmed.fastq -p $OUTPUTDIR/tmp/left_right_trimmed.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/left_right_untrimmed.fastq $OUTPUTDIR/tmp/right_left_untrimmed.fastq $OUTPUTDIR/tmp/left_untrimmed.fastq

  cat $OUTPUTDIR/tmp/left_trimmed.fastq  $OUTPUTDIR/tmp/left_right_trimmed.fastq > $OUTPUTDIR/tmp/left_reads.fq
  cat $OUTPUTDIR/tmp/right_trimmed.fastq  $OUTPUTDIR/tmp/right_left_trimmed.fastq > $OUTPUTDIR/tmp/right_reads.fq

  
  @BOWTIE@ -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/left_reads.fq > $OUTPUTDIR/tmp/left_mapped.sam; @SAMTOOLS@ view -Sb $OUTPUTDIR/tmp/left_mapped.sam > $OUTPUTDIR/tmp/left_mapped.bam; rm $OUTPUTDIR/tmp/left_mapped.sam
  @BOWTIE@ -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/right_reads.fq > $OUTPUTDIR/tmp/right_mapped.sam; @SAMTOOLS@ view -Sb $OUTPUTDIR/tmp/right_mapped.sam > $OUTPUTDIR/tmp/right_mapped.bam; rm $OUTPUTDIR/tmp/right_mapped.sam
  
  cd $OUTPUTDIR/tmp
  @SAMTOOLS@ sort -@ 6 -n -Tleftdata left_mapped.bam >left_kept.sorted.bam
  @SAMTOOLS@ sort -@ 6 -n -Trightdata right_mapped.bam > right_kept.sorted.bam
  cd ../..

  ### run mode to check 
  $BINDIR/mapped-reads-merge $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam $OUTPUTDIR/mapped_reads.bam $OUTPUTDIR/logs/alignment-statistics.txt


}

### process command line options

TEMP=`getopt -o o:hvapm: -l output:,mode:,noskip,splitnum:,keep-tmp,lsf-queue:,forward-linker:,reverse-linker:,ab-linker,a-linker:,b-linker:,pp:,min-len:,macs-gsize:,callbroadpeak,junction: -n 'origami' -- "$@"`
eval set -- "$TEMP"

while [ $# -ge 1 ]; do
	case "$1" in
		--)
			shift
			break
			;;
		-o|--output)
			OUTPUTDIR=$2
			shift
			;;
		-h)
			helpmenu
			exit 0
			;;
		-v)
			VERBOSE=on
			;;
		--noskip)
			SKIP=off
			;;
		-p)
			PARALLEL=on
			;;
		--mode)
		  RUNMODE="$2"
		  shift
		  ;;
		--splitnum)
		  SPLITNUM=$(expr "$2" \* 4)
		  shift
		  ;;
		--keep-tmp)
		  KEEPTMP=yes
		  ;;
		--lsf-queue)
		  LSFQUEUE="$2"
		  PARALLEL=on
		  shift
		  ;;
		--forward-linker)
		  FORWARDLINKER="$2"
		  shift
		  ;;
		--reverse-linker)
		  REVERSELINKER="$2"
		  shift
		  ;;
		--ab-linker)
		  echo "This option is deprecated! Use --mode=ab instead"
		  RUNMODE=ab
		  ;;
		--a-linker)
		  ABLINKERA="$2"
		  RUNMODE=ab
		  shift
		  ;;
		--b-linker)
		  ABLINKERB="$2"
		  RUNMODE=ab
		  shift
		  ;;
		--pp)
	    PREPROCESSINGCMD="$2"
	    shift
	    ;;
	  -m|--min-len)
	    MINREADLENGTH="$2"
	    shift
	    ;;
	  --macs-gsize)
	    MACSGSIZE="$2"
	    shift
	    ;;
	  --callbroadpeak)
	   CALLBROADPEAK=yes
	   ;;
	  --junction)
	   HICHIPLIGATIONJUNCTION="$2"
	   RUNMODE=hichip
	   shift
	   ;;
	esac
	shift
done

if [ $# -lt 3 ];
then
  helpmenu "Error: did not supply necessary file name arguments"
  exit 1
fi

BOWTIEIDX="$1"
LEFTREADS="$2"
RIGHTREADS="$3"

if [[ "$PARALLEL" == "on" ]] && [[ ! -n "$LSFQUEUE" ]];
then
  helpmenu "Error: if using -p, then must use --lsf-queue"
  exit 1
fi


echo "Launching origami..."

verbose "Analyzing $LEFTREADS and $RIGHTREADS"

verbose "Creating output directory"
mkdir $OUTPUTDIR
verbose "Creating temporary file directory"
mkdir $OUTPUTDIR/tmp
verbose "Creating logs directory"
mkdir $OUTPUTDIR/logs

echo "Running origami with the following command line: $ORIGINALCMD" > $OUTPUTDIR/logs/alignment-execution.txt

if [[ "$VERBOSE" != "on" ]] && [[ "$PARALLEL" == "on" ]];
then
  export BSUB_QUIET=Y
fi

## Get file suffix (assumes same suffix for both left and right files)
FILESUFFIX=${LEFTREADS##*.}

case "$FILESUFFIX" in
  gz)
    CATFUNC=zcat
    ;;
  bz2)
    CATFUNC=bzcat
    ;;
  *)
    CATFUNC=cat
    ;;
esac

if [[ "$SKIP" == "off" || ! -e "$OUTPUTDIR/mapped_reads.bam" ]];
then
  case "$RUNMODE" in
    long)
      linkertrimming "no"
    ;;
    ab)
      linkertrimming "yes"
    ;;
    hichip)
      hichip
    ;;
    *)
      helpmenu "Error: invalid run mode entered, must be one of: long, ab, or hichip"
      exit 1
    ;;
  esac
else
  echo "Skipping read processing, already detect the presence of $OUTPUTDIR/mapped_reads.bam"
fi

wait #finish all remaining processes from read trimming


echo "Filtering out duplicated PETs"
$SCRIPTDIR/remove-duplicates.pl $OUTPUTDIR/mapped_reads.bam | @SAMTOOLS@ view -Sb > $OUTPUTDIR/mapped_reads.rmdup.bam


echo "Calling peaks"

cd $OUTPUTDIR
dispatch "macs -t mapped_reads.bam -n macs1 -g $MACSGSIZE -f BAM --nomodel --nolambda -p 1e-9 --shiftsize 100"
cd ..

dispatch "@MACS2@ callpeak -t $OUTPUTDIR/mapped_reads.bam -n macs2 -q 0.05 -g $MACSGSIZE --nomodel --extsize 100 --outdir $OUTPUTDIR"

wait

if [ $CALLBROADPEAK == "yes" ]
then
  @MACS2@ callpeak -t $OUTPUTDIR/mapped_reads.bam --broad -q 0.05 -n macs2 -g $MACSGSIZE --nomodel --extsize 100 --outdir $OUTPUTDIR
  
  cut -f 1-6 $OUTPUTDIR/macs2_peaks.narrowPeak > $OUTPUTDIR/macs2peaks_merged.bed
  cut -f 1-6 $OUTPUTDIR/macs2_peaks.broadPeak >> $OUTPUTDIR/macs2peaks_merged.bed

fi

if [[ "$KEEPTMP" == "no" ]];
then
  echo "Cleaning up temporary directory"
  rm -r $OUTPUTDIR/tmp
fi


echo "Done"
