#!/usr/bin/env bash

## helper variables
BASEDIR=$(dirname $0)
BINDIR=$BASEDIR/../bin
SCRIPTDIR=$BASEDIR/../scripts
STATCMD=$SCRIPTDIR/update-stat-file.pl
VERSIONSTRING="v1.1-alpha-3"

### command line options
OUTPUTDIR=output
OUTPUTDIRFULLPATH=output
VERBOSE=off
SKIP=on
PARALLEL=off
RUNMODE=long
SPLITNUM=4000000
BZPOSTFIX="[.]bz2$"
BOWTIEIDX=notafile
KEEPTMP=no
KEEPPOSTFIX=no
FORWARDLINKER="ACGCGATATCTTATCTGACT"
REVERSELINKER="AGTCAGATAAGATATCGCGT"
ABLINKERA="CTGCTGTCCG"
ABLINKERB="CTGCTGTCAT"
MINREADLENGTH=20
MACSGSIZE=hs
CALLBROADPEAK=no
SKIPTRIMMING=no
BOWTIEOPT=""

### pre-processing
PREPROCESSINGCMD=cat
PREPROCESSINGPOSTFIX="sed -e 's/[;/][12]//g'"


### output file names
LOGFILE="/dev/null"

## other variables
ORIGINALCMD="$0 $@"



### utility functions

verbose() {
	if [ "$VERBOSE" = on ]
	then
		NOWTIME=$(date)
		echo "[$NOWTIME] $1"
	fi
}

verbosecmd() {
  if [ "$VERBOSE" = on ]
  then
    NOWTIME=$(date)
    echo "[$NOWTIME] $@"
  fi
  eval "$@"
}

dispatch() {
  if [ "$PARALLEL" = on ]
  then
    bsub -K -q $LSFQUEUE -J origami -o $OUTPUTDIRFULLPATH/logs/cluster_log.txt "$@" &
  else
    eval "$@"
  fi
}

versioninfo() {
  printf "origami $VERSIONSTRING\n"
}

helpmenu() {
  if [ $# -eq 1 ];
  then
    echo $1
  fi
  
  printf "origami-alignment [options] <bowtie1 index> <first read FASTQ> <second read FASTQ>\n"
  printf "\tFor the FASTQ files, they may be either uncompressed, gzip (.gz),\n"
  printf "\tor bzip2 (.bz2) format (automatically deteced by file suffix)\n\n"
  (printf " %s\t%s\n" "-h" "print help menu (this menu) and exit"
  printf " %s\t%s\n" "-o,--output=" "directory to output sequence alignments (default is output/)"
  printf " %s\t%s\n" "-v" "turn on verbose mode"
  printf " %s\t%s\b" "--version" "print version information and quit"
  printf "Parallelization options:\t \n"
  printf " %s\t%s\n" "-p" "run in parallel mode (currently only available for LSF queues, requires --lsf-queue)"
  printf " %s\t%s\n" "--lsf-queue=[queue]" "set the LSF queue to use in parallel mode (implies -p)"
  printf " %s\t%s\n" "--divide-pets=[NUM]" "when parallel is turned on, divide the PETs into subfiles of NUM PETs each to distribute on a cluster (default 10000000)"
  printf "Read trimming options:\t \n"
  printf " %s\t%s\n" "--mode=[mode]" "set read processing mode: bridge-linker (long, default) or AB-linker (ab)"
  printf " %s\t%s\n" "-m,--min-len=" "minimum read-length to keep after read-trimming (default is 20 bp)"
  printf " %s\t%s\n" "--forward-linker=[DNA]"  "set the bridge-linker foward sequence (default ACGCGATATCTTATCTGACT)"
  printf " %s\t%s\n" "--reverse-linker=[DNA]"  "set the bridge-linker reverse sequence (default AGTCAGATAAGATATCGCGT)"
  printf " %s\t%s\n" "--a-linker=[DNA]" "set the AB-linker A sequence (default CTGCTGTCCG)"
  printf " %s\t%s\n" "--b-linker=[DNA]" "set the AB-linker B sequence (default, CTGCTGTCAT)"
  printf "Peak calling options:\t \n"
  printf " %s\t%s\n" "--macs-gsize=[string]" "set genome size for macs2 peak calling (default is 'hs')"
  printf " %s\t%s\n" "--callbroadpeak" "calls broad peaks via macs2 and generates merged peak file"
  printf "Miscellaneous options:\t \n"
  printf " %s\t%s\n" "--pp=[executable]" "pipe reads through executable STDIN before writing them to temporary files (must be executable, default none)"
  #printf " %s\t%s\n" "--keep-postfix" "do not automatically trim /1 and /2 postfix sequences"
  printf " %s\t%s\n" "--keep-tmp" "don't delete the temporary files") | column -t -s $'\t'
  
}

### functions related to read processing

linkertrimming() {
  
  USEABLINKER="$1"
  case $USEABLINKER in
    yes)
      echo "Running in AB-linker trimming mode"
      $STATCMD $LOGFILERUNNING mode AB-linker
      ;;
    no)
      echo "Running in long-linker trimming mode"
      $STATCMD $LOGFILERUNNING mode bridge-linker
      ;;
    *)
      ## this shouldn't get here, but in case it does default to long-linker mode
      echo "Running in long-linker trimming mode"
      $STATCMD $LOGFILERUNNING mode bridge-linker
      ;;
  esac
  
  if [ $PARALLEL = "on" ]
  then
    ## One assumption here is that split names the files in the same linear order -- maybe this should be done differently?
    LEFTREADS=($(ls $OUTPUTDIR/tmp/leftreads*))
    RIGHTREADS=($(ls $OUTPUTDIR/tmp/rightreads*))
    

    if [ $USEABLINKER = "yes" ]
    then
      AAPARAM="-a $ABLINKERA -A $ABLINKERA"
      BBPARAM="-a $ABLINKERB -A $ABLINKERB"
      ABPARAM="-a $ABLINKERA -A $ABLINKERB"
      BAPARAM="-a $ABLINKERB -A $ABLINKERA"
      NPARAM="-a $ABLINKERA -a $ABLINKERB -A $ABLINKERA -A $ABLINKERB"
      
      
      for((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $AAPARAM -o $OUTPUTDIR/tmp/l_same_aa_$i.fq -p $OUTPUTDIR/tmp/r_same_aa_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
      
        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BBPARAM -o $OUTPUTDIR/tmp/l_same_bb_$i.fq -p $OUTPUTDIR/tmp/r_same_bb_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $ABPARAM -o $OUTPUTDIR/tmp/l_diff_ab_$i.fq -p $OUTPUTDIR/tmp/r_diff_ab_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BAPARAM -o $OUTPUTDIR/tmp/l_diff_ba_$i.fq -p $OUTPUTDIR/tmp/r_diff_ba_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
        
        dispatch @CUTADAPTOR@ -f fastq -n 3 --overlap 10 -e 0 --discard-trimmed -m $MINREADLENGTH $NPARAM -o $OUTPUTDIR/tmp/l_neither_$i.fq -p $OUTPUTDIR/tmp/r_neither_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

      done
      
      wait

      dispatch "cat $OUTPUTDIR/tmp/l_same_aa_*.fq $OUTPUTDIR/tmp/l_same_bb_*.fq > $OUTPUTDIR/tmp/left_kept.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_same_aa_*.fq $OUTPUTDIR/tmp/r_same_bb_*.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_diff_ab_*.fq $OUTPUTDIR/tmp/l_diff_ba_*.fq > $OUTPUTDIR/tmp/left_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_diff_ab_*.fq $OUTPUTDIR/tmp/r_diff_ba_*.fq > $OUTPUTDIR/tmp/right_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/l_neither_*.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_neither_*.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"

      wait
    else

      for ((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch @CUTADAPTOR@ -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/l_t1_$i.fq --untrimmed-output $OUTPUTDIR/tmp/l_nt1_$i.fq -p $OUTPUTDIR/tmp/r_t1_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/r_nt1_$i.fq ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
      done
      wait
  
      for ((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch @CUTADAPTOR@ -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t2_$i.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt2_$i.fq -p $OUTPUTDIR/tmp/l_t2_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt2_$i.fq $OUTPUTDIR/tmp/r_nt1_$i.fq $OUTPUTDIR/tmp/l_nt1_$i.fq
      
        dispatch @CUTADAPTOR@ -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t3_$i.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt3_$i.fq -p $OUTPUTDIR/tmp/l_t3_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt3_$i.fq $OUTPUTDIR/tmp/r_t1_$i.fq $OUTPUTDIR/tmp/l_t1_$i.fq
      done

      wait
  
      dispatch "cat $OUTPUTDIR/tmp/l_t3*.fq $OUTPUTDIR/tmp/l_nt3*.fq $OUTPUTDIR/tmp/l_t2*.fq > $OUTPUTDIR/tmp/left_kept.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_t3*.fq $OUTPUTDIR/tmp/r_nt3*.fq $OUTPUTDIR/tmp/r_t2*.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_nt2*.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_nt2*.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"

      wait
    fi
    
    $SCRIPTDIR/make-trimmed-reads-stat-report.pl dir $OUTPUTDIRFULLPATH/tmp $USEABLINKER $OUTPUTDIR/logs/trimming-report.txt
    
    rm $OUTPUTDIR/tmp/leftreads* $OUTPUTDIR/tmp/rightreads*

  else
    if [ $USEABLINKER = "yes" ]
    then

      AAPARAM="-a $ABLINKERA -A $ABLINKERA"
      BBPARAM="-a $ABLINKERB -A $ABLINKERB"
      ABPARAM="-a $ABLINKERA -A $ABLINKERB"
      BAPARAM="-a $ABLINKERB -A $ABLINKERA"
      
    
      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $AAPARAM -o $OUTPUTDIR/tmp/l_same_aa.fq -p $OUTPUTDIR/tmp/r_same_aa.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
      
      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BBPARAM -o $OUTPUTDIR/tmp/l_same_bb.fq -p $OUTPUTDIR/tmp/r_same_bb.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq


      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $ABPARAM -o $OUTPUTDIR/tmp/l_diff_ab.fq -p $OUTPUTDIR/tmp/r_diff_ab.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BAPARAM -o $OUTPUTDIR/tmp/l_diff_ba.fq -p $OUTPUTDIR/tmp/r_diff_ba.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
      
      dispatch @CUTADAPTOR@ -n 3 --overlap 10 -e 0 --discard-trimmed -m $MINREADLENGTH $NPARAM -o $OUTPUTDIR/tmp/l_neither.fq -p $OUTPUTDIR/tmp/r_neither.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}


      dispatch "cat $OUTPUTDIR/tmp/l_same_aa.fq $OUTPUTDIR/tmp/l_same_bb.fq > $OUTPUTDIR/tmp/left_kept.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_same_aa.fq $OUTPUTDIR/tmp/r_same_bb.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_diff_ab.fq $OUTPUTDIR/tmp/l_diff_ba.fq > $OUTPUTDIR/tmp/left_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_diff_ab.fq $OUTPUTDIR/tmp/r_diff_ba.fq > $OUTPUTDIR/tmp/right_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/l_neither.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_neither.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"
      
      $STATCMD $LOGFILERUNNING ablinkeraa $OUTPUTDIRFULLPATH/tmp/l_same_aa.fq
      $STATCMD $LOGFILERUNNING ablinkerbb $OUTPUTDIRFULLPATH/tmp/l_same_bb.fq
      $STATCMD $LOGFILERUNNING ablinkerab $OUTPUTDIRFULLPATH/tmp/l_diff_ab.fq $OUTPUTDIRFULLPATH/tmp/l_diff_ba.fq
      $STATCMD $LOGFILERUNNING ablinkernottrimmed $OUTPUTDIRFULLPATH/tmp/left_untrimmed.fq




    else

      dispatch @CUTADAPTOR@ -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/l_t1.fq --untrimmed-output $OUTPUTDIR/tmp/l_nt1.fq -p $OUTPUTDIR/tmp/r_t1.fq --untrimmed-paired-output $OUTPUTDIR/tmp/r_nt1.fq $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
    
      wait
    
      dispatch @CUTADAPTOR@ -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t2.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt2.fq -p $OUTPUTDIR/tmp/l_t2.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt2.fq $OUTPUTDIR/tmp/r_nt1.fq $OUTPUTDIR/tmp/l_nt1.fq
    
      dispatch @CUTADAPTOR@ -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t3.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt3.fq -p $OUTPUTDIR/tmp/l_t3.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt3.fq $OUTPUTDIR/tmp/r_t1.fq $OUTPUTDIR/tmp/l_t1.fq

      wait

      dispatch "cat $OUTPUTDIR/tmp/l_t3.fq $OUTPUTDIR/tmp/l_nt3.fq $OUTPUTDIR/tmp/l_t2.fq > $OUTPUTDIR/tmp/left_kept.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_t3.fq $OUTPUTDIR/tmp/r_nt3.fq $OUTPUTDIR/tmp/r_t2.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_nt2.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_nt2.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"  

      wait
      
      $STATCMD $LOGFILERUNNING bridgewithlinker $OUTPUTDIRFULLPATH/tmp/left_kept.fq
      $STATCMD $LOGFILERUNNING bridgewithoutlinker $OUTPUTDIRFULLPATH/tmp/left_untrimmed.fq

    fi

  fi
  
  if [ ! -e "$OUTPUTDIR/tmp/left_kept.fq" ] || [ ! -e "$OUTPUTDIR/tmp/right_kept.fq" ]
  then
    echo "Read trimming failed, see error messages"
    exit 1
  fi
    
  rm $OUTPUTDIRFULLPATH/tmp/left_reads.fq $OUTPUTDIRFULLPATH/tmp/right_reads.fq

  ### Cleanup
  rm $OUTPUTDIRFULLPATH/tmp/l_*.fq $OUTPUTDIRFULLPATH/tmp/r_*.fq

  if [ $USEABLINKER = 'yes' ]
  then
    dispatch "bzip2 $OUTPUTDIR/tmp/left_chimeric.fq"    
    dispatch "bzip2 $OUTPUTDIR/tmp/right_chimeric.fq"
  fi
  
  dispatch bzip2 $OUTPUTDIR/tmp/left_untrimmed.fq
  dispatch bzip2 $OUTPUTDIR/tmp/right_untrimmed.fq
  
  
  wait



  if [ "$SKIPTRIMMING" == "no" ];
  then

    if [ $USEABLINKER = 'yes' ]
    then
      mv $OUTPUTDIR/tmp/left_chimeric.fq.bz2 $OUTPUTDIR/.
      mv $OUTPUTDIR/tmp/right_chimeric.fq.bz2 $OUTPUTDIR/.
    fi

    ## Keep untrimmed reads
    mv $OUTPUTDIR/tmp/left_untrimmed.fq.bz2 $OUTPUTDIR/.
    mv $OUTPUTDIR/tmp/right_untrimmed.fq.bz2 $OUTPUTDIR/.



    rm -f $OUTPUTDIR/tmp/left_unzip.fq  $OUTPUTDIR/tmp/right_unzip.fq

  else
    dispatch "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/left_kept.fq"
    
    dispatch "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/right_kept.fq"
  
    wait
  fi

  echo "Aligning reads"
  if [[ "$SKIP" == "off" || ! -e "$OUTPUTDIR/mapped_reads.bam" ]]; #&& $BINDIR/bowtie_align.sh $OUTPUTDIR $BOWTIEIDX $PARALLEL $SPLITNUM
  then

    if [ $PARALLEL == "on" ];
    then
      dispatch "split -l $SPLITNUM $OUTPUTDIR/tmp/left_kept.fq $OUTPUTDIR/tmp/leftkept"
      dispatch "split -l $SPLITNUM $OUTPUTDIR/tmp/right_kept.fq $OUTPUTDIR/tmp/rightkept"

      wait

      for FILE in $OUTPUTDIR/tmp/leftkept*
      do
  	    dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $FILE > $FILE.sam; @SAMTOOLS@ view -Sb $FILE.sam > $FILE.bam; rm $FILE.sam"
      done

      for FILE in $OUTPUTDIR/tmp/rightkept*
      do
    	  dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $FILE > $FILE.sam; @SAMTOOLS@ view -Sb $FILE.sam > $FILE.bam; rm $FILE.sam"
      done

      wait

      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ merge left_kept.bam leftkept*.bam"
      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ merge right_kept.bam rightkept*.bam"

      wait

      dispatch "rm $OUTPUTDIR/tmp/leftkept* $OUTPUTDIR/tmp/rightkept*"
      wait
    else
      dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/left_kept.fq > $OUTPUTDIR/tmp/left_kept.sam 2>$OUTPUTDIR/logs/first_read_alignment.txt; @SAMTOOLS@ view -Sb $OUTPUTDIR/tmp/left_kept.sam > $OUTPUTDIR/tmp/left_kept.bam; rm $OUTPUTDIR/tmp/left_kept.sam"
      dispatch "@BOWTIE@ $BOWTIEOPT -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/right_kept.fq > $OUTPUTDIR/tmp/right_kept.sam 2>$OUTPUTDIR/logs/second_read_alignment.txt; @SAMTOOLS@ view -Sb $OUTPUTDIR/tmp/right_kept.sam > $OUTPUTDIR/tmp/right_kept.bam; rm $OUTPUTDIR/tmp/right_kept.sam"

      wait
    fi
    
    $STATCMD $LOGFILERUNNING bowtiefirstread $OUTPUTDIR/logs/first_read_alignment.txt
    $STATCMD $LOGFILERUNNING bowtiesecondread $OUTPUTDIR/logs/second_read_alignment.txt



    if [ $PARALLEL = "on" ];
    then
      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ sort -Obam -Tlefttmp -n left_kept.bam > left_kept.sorted.bam"
  
      dispatch "cd $OUTPUTDIR/tmp && @SAMTOOLS@ sort -Obam -Trighttmp -n right_kept.bam > right_kept.sorted.bam"
    else
      (cd $OUTPUTDIR/tmp
      @SAMTOOLS@ sort -Obam -Tlefttmp -n left_kept.bam > left_kept.sorted.bam
      )
      
      (cd $OUTPUTDIR/tmp
      @SAMTOOLS@ sort -Obam -Trighttmp -n right_kept.bam > right_kept.sorted.bam
      )
    fi
  fi


  wait

  dispatch "$BINDIR/mapped-reads-merge $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam $OUTPUTDIR/mapped_reads.bam $OUTPUTDIR/logs/alignment-statistics.txt"

  wait


  rm $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam

  #mv $OUTPUTDIR/tmp/left_kept.bam $OUTPUTDIR/left_kept.bam
  #mv $OUTPUTDIR/tmp/right_kept.bam $OUTPUTDIR/right_kept.bam
}

### process command line options

TEMP=`getopt -o o:hvapm: -l output:,mode:,noskip,splitnum:,keep-tmp,lsf-queue:,forward-linker:,reverse-linker:,ab-linker,a-linker:,b-linker:,pp:,min-len:,macs-gsize:,callbroadpeak,divide-pets:,keep-postfix,version -n 'origami-alignment' -- "$@"`

if [ $? -ne 0 ];
then
  exit 1 ## detected invalid option
fi

eval set -- "$TEMP"

while [ $# -ge 1 ]; do
	case "$1" in
		--)
			shift
			break
			;;
		-o|--output)
			OUTPUTDIR=$2
			shift
			;;
		-h)
			helpmenu
			exit 0
			;;
		--version)
		  versioninfo
		  exit 0
		  ;;
		-v)
			VERBOSE=on
			;;
		--noskip)
			SKIP=off
			;;
		-p)
			PARALLEL=on
			;;
		--mode)
		  RUNMODE="$2"
		  shift
		  ;;
		--splitnum | --divide-pets)
		  if [ "$1" == "--splitnum" ];
		  then
		    echo "WARNING: --splitnum is deprecated, use --divide-pets instead"
		  fi
		  SPLITNUM=$(expr "$2" \* 4)
		  shift
		  ;;
		--keep-tmp)
		  KEEPTMP=yes
		  ;;
		--lsf-queue)
		  LSFQUEUE="$2"
		  PARALLEL=on
		  shift
		  ;;
		--forward-linker)
		  FORWARDLINKER="$2"
		  shift
		  ;;
		--reverse-linker)
		  REVERSELINKER="$2"
		  shift
		  ;;
		--ab-linker)
		  echo "This option is deprecated! Use --mode=ab instead"
		  RUNMODE=ab
		  ;;
		--a-linker)
		  ABLINKERA="$2"
		  RUNMODE=ab
		  shift
		  ;;
		--b-linker)
		  ABLINKERB="$2"
		  RUNMODE=ab
		  shift
		  ;;
		--pp)
	    PREPROCESSINGCMD="$2"
	    
	    if [ ! -e "$PREPROCESSINGCMD" ]
	    then
	      helpmenu "Error: Cannot find pre-processing executable file $PREPROCESSINGCMD"
	      exit 1
	    fi
	     
	    if [ ! -x "$PREPROCESSINGCMD" ]
	    then
	      helpmenu "Error: you do not have permission to execute file $PREPROCESSINGCMD"
	      exit 1
	    fi
	    
	    shift
	    ;;
	  -m|--min-len)
	    MINREADLENGTH="$2"
	    
	    if [ "$MINREADLENGTH" -lt 1 ];
	    then
	      helpmenu "Error: need positive minimum read length"
	      exit 1
	    fi
	    
	    if [ "$MINREADLENGTH" -lt 15 ];
	    then
	      echo "WARNING: Minimum read length is set to less than 15 bp, at least 15 bp minumum is recommended for optimal performance"
	    fi
	    
	    shift
	    ;;
	  --macs-gsize)
	    MACSGSIZE="$2"
	    shift
	    ;;
	  --callbroadpeak)
	   CALLBROADPEAK=yes
	   ;;
	  --keep-postfix)
	   KEEPPOSTFIX=yes
	   ;;
	  

	esac
	shift
done

if [ $# -lt 3 ];
then
  helpmenu "Error: did not supply necessary file name arguments"
  exit 1
fi

BOWTIEIDX="$1"
LEFTREADS="$2"
RIGHTREADS="$3"

if [[ "$PARALLEL" == "on" ]] && [[ ! -n "$LSFQUEUE" ]];
then
  helpmenu "Error: if using -p, then must use --lsf-queue"
  exit 1
fi


echo "Launching origami..."

if [ ! -e "$LEFTREADS" ];
then
  echo "Cannot find $LEFTREADS!"
  exit 1
fi

if [ ! -e "$RIGHTREADS" ];
then  
  echo "Cannot find $RIGHTREADS!"
  exit 1
fi

verbose "Analyzing $LEFTREADS and $RIGHTREADS"

if [ ! -e "$OUTPUTDIR" ];
then
  verbose "Creating output directory"
  mkdir $OUTPUTDIR
  
  if [ $? -ne 0 ];
  then
    echo "Failed to create $OUTPUTDIR!"
    exit 1
  fi
fi

if [ ! -d "$OUTPUTDIR" ];
then
  echo "$OUTPUTDIR is not a directory!"
  exit 1
fi

OUTPUTDIRFULLPATH=$(cd $OUTPUTDIR; pwd -P)

verbose "Creating temporary file directory"
mkdir $OUTPUTDIR/tmp
verbose "Creating logs directory"
mkdir $OUTPUTDIR/logs

## update output file targets
LOGFILERUNNING="$OUTPUTDIR/logs/.report-info.txt"
LOGFILE="$OUTPUTDIR/logs/alignment-report.txt"

#echo "Running origami with the following command line: $ORIGINALCMD" > $OUTPUTDIR/logs/alignment-execution.txt

$STATCMD $LOGFILERUNNING origamiver $VERSIONSTRING
$STATCMD $LOGFILERUNNING date $(date)
$STATCMD $LOGFILERUNNING cmdline $ORIGINALCMD
$STATCMD $LOGFILERUNNING firstreadfiles $LEFTREADS
$STATCMD $LOGFILERUNNING secondreadfiles $RIGHTREADS


if [[ "$VERBOSE" != "on" ]] && [[ "$PARALLEL" == "on" ]];
then
  export BSUB_QUIET=Y ## this option disables LSF from sending e-mails after each job is completed, which can lead to a lot of e-mails
fi

## Get file suffix (assumes same suffix for both left and right files)
FILESUFFIX=${LEFTREADS##*.}

case "$FILESUFFIX" in
  tgz)
    CATFUNC="tar --strip-components=5 -xzOf"
    ;;
  gz)
    if [[ "$LEFTREADS" =~ ".tar.gz" ]]
    then
      CATFUNC="tar --strip-components=5 -xzOf"
    else
      CATFUNC=zcat
    fi
    ;;
  bz2)
    CATFUNC=bzcat
    ;;
  *)
    CATFUNC=cat
    ;;
esac

if [ "$KEEPPOSTFIX" = "yes" ];
then
  PREPROCESSINGPOSTFIX=cat
fi

### unpack reads, filter reads, remove postfix
if [ "$PARALLEL" = "on" ];
then
  dispatch "eval $CATFUNC $LEFTREADS | $STATCMD $LOGFILERUNNING initialpets - | eval $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/leftreads"
  dispatch "eval $CATFUNC $RIGHTREADS |  eval $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/rightreads"
  
  wait
  
  if [ ! -e "$OUTPUTDIR/tmp/leftreadsaa" ] ## should broaden error handling at some point
  then
    echo "Failed to unpack $LEFTREADS, see error messages"
    exit 1
  fi
  
  if [ ! -e "$OUTPUTDIR/tmp/rightreadsaa" ];
  then
    echo "Failed to unpack $RIGHTREADS, see error messages"
    exit 1
  fi
  
  $STATCMD $LOGFILERUNNING procpets $OUTPUTDIR/tmp/leftreads*
else
  eval $CATFUNC $LEFTREADS | $STATCMD $LOGFILERUNNING initialpets - | eval $PREPROCESSINGCMD  > $OUTPUTDIR/tmp/left_reads.fq
  
  if [ $? -ne 0 ]
  then
    echo "Failed to unpack FASTQ file $LEFTREADS, see error messages"
    exit 1
  fi
  
  $STATCMD $LOGFILERUNNING procpets $OUTPUTDIR/tmp/left_reads.fq
  
  eval $CATFUNC $RIGHTREADS | eval $PREPROCESSINGPOSTFIX | eval $PREPROCESSINGCMD > $OUTPUTDIR/tmp/right_reads.fq
  
  if [ $? -ne 0 ]
  then
    echo "Failed to unpack FASTQ file $RIGHTREADS, see error messages"
    exit 1
  fi
fi

if [[ "$SKIP" == "off" || ! -e "$OUTPUTDIR/mapped_reads.bam" ]];
then
  case "$RUNMODE" in
    long)
      linkertrimming "no"
    ;;
    ab)
      linkertrimming "yes"
    ;;
    *)
      helpmenu "Error: invalid run mode entered, must be one of: long or ab"
      exit 1
    ;;
  esac
else
  echo "Skipping read processing, already detect the presence of $OUTPUTDIR/mapped_reads.bam"
fi

wait #finish all remaining processes from read trimming


echo "Filtering out duplicated PETs"
$SCRIPTDIR/remove-duplicates.pl $OUTPUTDIR/mapped_reads.bam | @SAMTOOLS@ view -Sb > $OUTPUTDIR/mapped_reads.rmdup.bam

if [ $? -ne 0 ];
then
  echo "Failed to remove PCR duplicates, see error messages"
  exit 1
fi

(cd $OUTPUTDIR
  samtools sort -@8 -Ttmp mapped_reads.rmdup.bam > mapped_reads.rmdup.sorted.bam
)

if [ ! -e "$OUTPUTDIR/mapped_reads.rmdup.sorted.bam" ]
then
  echo "Failed to sort BAM file correctly, see error messages"
  exit 1
fi

echo "Calling peaks"

(
cd $OUTPUTDIR
macs -t mapped_reads.bam -n macs1 -g $MACSGSIZE -f BAM --nomodel --nolambda -p 1e-9 --shiftsize 100
)


@MACS2@ callpeak -t $OUTPUTDIR/mapped_reads.bam -n macs2 -q 0.05 -g $MACSGSIZE --nomodel --extsize 100 --outdir $OUTPUTDIR


if [ ! -e "$OUTPUTDIRFULLPATH/macs1_peaks.bed" ]
then
  echo "Failed to call MACS1 peaks correctly, see error messages"
  exit 1
fi


if [ ! -e "$OUTPUTDIRFULLPATH/macs2_peaks.narrowPeak" ];
then
  echo "Failed to call MACS2 peaks correctly, see error messages"
  exit 1
fi

$STATCMD $LOGFILERUNNING macs1peaks $OUTPUTDIRFULLPATH/macs1_peaks.bed
$STATCMD $LOGFILERUNNING macs2peaks $OUTPUTDIRFULLPATH/macs2_peaks.narrowPeak



if [ $CALLBROADPEAK == "yes" ]
then
  @MACS2@ callpeak -t $OUTPUTDIR/mapped_reads.bam --broad -q 0.05 -n macs2 -g $MACSGSIZE --nomodel --extsize 100 --outdir $OUTPUTDIR
  
  cut -f 1-6 $OUTPUTDIRFULLPATH/macs2_peaks.narrowPeak > $OUTPUTDIRFULLPATH/macs2peaks_merged.bed
  cut -f 1-6 $OUTPUTDIRFULLPATH/macs2_peaks.broadPeak >> $OUTPUTDIRFULLPATH/macs2peaks_merged.bed

fi


### generate final alignment report
$STATCMD $LOGFILERUNNING final $LOGFILE

if [[ "$KEEPTMP" == "no" ]];
then
  echo "Cleaning up temporary directory"
  rm -r $OUTPUTDIRFULLPATH/tmp
  rm $LOGFILERUNNING
fi

echo "Done"
