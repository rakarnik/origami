#!/bin/bash

BASEDIR=$(dirname $0)
SCRIPTDIR=$BASEDIR/../scripts

PEAKCOUNTFILE=raw-counts.out
INTCOUNTFILE=raw-interactions.out
TMPFILE=$RANDOM.peaks.bed
TMPBAMPREFIX=bam$RANDOM.prefix
BURNIN=100
ITERATIONS=10000
PRUNE=5
MERGEDIST=0
SLOPDIST=0
SLOPGENOME=null
MINIMODEL=yes
USEDISTANCE=yes
ZSCOREFILTER=no
ASSIGNTOPEAKS=no
ONLYMAP=no
MINDIST=0
MAXDIST=0
NOINTERCHROMOSOMAL=no
USEDF=0

helpmenu() {
  if [ $# -eq 1 ];
  then
    echo $1
  fi
  
  echo "origami-analysis [options] <mapped reads BAM> <peak BED file> <output prefix>"
  echo "  -h help menu (this output)"
  echo "  --without-distance    Turns off weighing interactions with a distance-driven weight"
  echo "  --iterations=[positive integer] Sets the number of iterations for running the MCMC estimation (default 10000)"
  echo "  --burn-in=[0 or positive integer] Sets the number of iterations to use as the burn-in period, separate from the --iterations (default 100, 0 means no burn-in period)"
  echo "  --prune=[0 or >=2] Sets the number of steps at which to take an iteration rather than prune it (default 5, 0 means no pruning)"
  echo "  --join-nearby-peaks=[positive integer]  For peaks within N distance, merge them together"
  echo "  --slop-dist=[positive integer]  Set the slop distance on both ends of the peak (default 0, needs --slop-genome)"
  echo "  --slop-genome=[file]      Genome annotation file for size of each chromosome (default none, needs --slop-dist)"
  echo "  --save-full-model         Save data from the full model (save the "mini"-model data by default)"
  echo "  --peak-count-filter=[zscore]   Filter peaks with greater than z-score (default no filtering)"
  echo "  --use-df=[positive number]  Set effective degrees of freedom for the smooth spline calculation of distance"
  echo "  --only-map-pets   Only generate files for counting PETs at peaks and interactions, do not run the statistical modeling"
  echo "  --assign-to-peaks   Generates a secondary output where each end of an observed interaction fall on (one of) the original ChIP peak(s) [experimental]"
  echo "  --min-dist=[positive integer]  Minimum intrachromsomal distance to consider (default consider all interactions)"
  echo "  --max-dist=[positive integer]  Maximum intrachromsomal distance to consider (default consider all interactions)"
  echo "  --no-interchromosomal  Do not consider any interchromsomal interactions"
}



TEMP=`getopt -o h -l iterations:,burn-in:,prune:,slop-dist:,slop-genome:,save-full-model,without-distance,peak-count-filter:,use-df:,assign-to-peaks,only-map-pets,join-nearby-peaks:,min-dist:,max-dist:,no-interchromosomal -n 'origami' -- "$@"`
eval set -- "$TEMP"

while [ $# -ge 1 ]; do
	case "$1" in
		--)
			shift
			break
			;;
		-h)
			helpmenu
			exit 0
			;;
		--iterations)
		  ITERATIONS="$2"
		  shift
		  ;;
		--burn-in)
		  BURNIN="$2"
		  shift
		  ;;
		--prune)
		  PRUNE="$2"
		  shift
		  ;;
		--slop-dist)
		  SLOPDIST="$2"
		  shift
		  ;;
		--slop-genome)
		  SLOPGENOME="$2"
		  shift
		  ;;
		--save-full-model)
		  MINIMODEL=no
		  ;;
		--without-distance)
		  USEDISTANCE=no
		  ;;
		--peak-count-filter)
		  ZSCOREFILTER="$2"
		  shift
		  ;;
		--use-df)
		  USEDF="$2"
		  shift
		  ;;
		--assign-to-peaks)
		  ASSIGNTOPEAKS=yes
		  ;;
		--only-map-pets)
		  ONLYMAP=yes
		  ;;
		--join-nearby-peaks)
		  MERGEDIST="$2"
		  shift
		  ;;
		--min-dist)
		  MINDIST="$2"
		  shift
		  ;;
		--max-dist)
		  MAXDIST="$2"
		  shift
		  ;;
		--no-interchromosomal)
		  NOINTERCHROMOSOMAL=yes
		  ;;
	esac
	shift
done

if [ $# -lt 3 ];
then
  helpmenu "Error: did not supply necessary file name arguments"
  exit 1
fi


READSFILE=$1
INPUTFILE=$2
PREFIX=$3

if ([ $SLOPDIST -eq 0 ] && [ $SLOPGENOME != "null" ]) || ([ $SLOPDIST -gt 0 ] && [ $SLOPGENOME = "null" ])
then
  helpmenu "Error: if specifying --slop-dist or --slop-genome, must specify the other"
  exit 1
fi


echo "Identifying PET counts in peaks and interactions..."

cut -f 1,2,3 $INPUTFILE | sort -k 1,1 -k 2,2n > $TMPFILE

if [ $MERGEDIST -gt 0 ];
then
  OUTFILE=$PREFIX.merge.bed
  @BEDTOOLS@ merge -i $TMPFILE -d $MERGEDIST > $OUTFILE
  cp $OUTFILE $TMPFILE
fi

if [ $SLOPDIST -gt 0 ];
then
  OUTFILE=$PREFIX.slop.bed
  @BEDTOOLS@ slop -i $TMPFILE -g $SLOPGENOME -b $SLOPDIST | @BEDTOOLS@ merge > $OUTFILE
  cp $OUTFILE $TMPFILE
fi
  

if [ ! -e "$PREFIX-raw-counts.out" ];
then
  @BEDTOOLS@ coverage -counts -abam $READSFILE -b $TMPFILE > $PREFIX-raw-counts.out
fi

if [ $ZSCOREFILTER != "no" ];
then
  FILTERBEDTMP=$RANDOM.keeppeaks.bed
  TRANSTMP=$RANDOM.trans.out
  Rscript $SCRIPTDIR/peaks-zscore.r $PREFIX-raw-counts.out $FILTERBEDTMP $ZSCOREFILTER
  @BEDTOOLS@ intersect -wa -a $PREFIX-raw-counts.out -b $FILTERBEDTMP > $TRANSTMP
  mv $TRANSTMP $PREFIX-raw-counts.out ## removed filtered counts
  @BEDTOOLS@ intersect -wa -a $TMPFILE -b $FILTERBEDTMP > $TRANSTMP
  mv $TRANSTMP $TMPFILE ## remove filtered peaks
  rm $FILTERBEDTMP
fi

if [ ! -e "$PREFIX-raw-int-counts.txt" ];
then
  OUTFILE="$RANDOM.tmp.txt"
  CARRYFILE="$RANDOM.tmp.txt"
  @BEDTOOLS@ pairtobed -bedpe -type both -abam $READSFILE -b $TMPFILE > $PREFIX-raw-interactions.out

  $SCRIPTDIR/estimate-counts.pl $PREFIX-raw-interactions.out > $OUTFILE
  
  if [ $MINDIST -gt 0 ];
  then
    awk 'function abs(value) { return (value<0?-value:value); } { if($1!=$4 || abs($5-$3) >= $MINDIST) print }' $OUTFILE > $CARRYFILE
    mv $CARRYFILE $OUTFILE
  fi
  
  if [ $MAXDIST -gt 0 ];
  then
    awk 'function abs(value) { return (value<0?-value:value); } { if($1!=$4 || abs($5-$3) <= $MAXDIST) print }' $OUTFILE > $CARRYFILE
    mv $CARRYFILE $OUTFILE
  fi
  
  if [ $NOINTERCHROMOSOMAL == "yes" ];
  then
    awk '{ if($1==$4) print }' $OUTFILE > $CARRYFILE
    mv $CARRYFILE $OUTFILE
  fi
  
  mv $OUTFILE $PREFIX-raw-int-counts.txt
fi

rm $TMPFILE 

echo "Estimating interaction belief..."

if [ $ONLYMAP == "no" ];
then
  Rscript $SCRIPTDIR/estimate-significance.r $PREFIX-raw-counts.out $PREFIX-raw-int-counts.txt $PREFIX-results.csv $PREFIX-model-data.Rdata $ITERATIONS $BURNIN $PRUNE $MINIMODEL $USEDISTANCE $USEDF
fi

if [ $ASSIGNTOPEAKS != "no" ] && [ $ONLYMAP == "no" ]
then
  ANCHORS=$RANDOM.anchors.bed
  OVERLAP=$RANDOM.anchors.bed
  $SCRIPTDIR/extract-anchors.pl $PREFIX-results.csv > $ANCHORS
  @BEDTOOLS@ intersect -wao -a $ANCHORS -b $INPUTFILE > $OVERLAP
  $SCRIPTDIR/reassign-anchors.pl $PREFIX-results.csv $OVERLAP > $PREFIX-results-peakassigned.csv
  rm $ANCHORS $OVERLAP
fi